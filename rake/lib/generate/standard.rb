#--------------------------------------------------------------------
# @file    standard.rb
# @author  Martin Corino
#
# @brief   wxRuby3 wxWidgets standard interface generator
#
# @copyright Copyright (c) M.J.N. Corino, The Netherlands
#--------------------------------------------------------------------

require_relative './templates'

module WXRuby3

  class StandardGenerator < Generator

    class << self
      def has_erb_kw?
        if @has_erb_kw.nil?
          @has_erb_kw = if ERB.version =~ /erb\.rb\s+\[(\d+\.\d+\.\d+)/
                          $1.gsub('.','').to_i > 210
                        else
                          false
                        end
        end
        !!@has_erb_kw
      end
    end

    module Template

      LIST = [
        { template: (<<~__HEREDOC
          <% if spec.swig_begin_code && !spec.swig_begin_code.empty? %> 

          <%= spec.swig_begin_code %>
          <% end %>
          <% unless spec.includes.empty? %>
 
          %header {
          <% spec.includes.each do |inc| %>
          #include <<%= inc %>>
          <% end %>
          %}
          <% end %>
          <% if spec.begin_code && !spec.begin_code.empty? %>
 
          %begin %{
          <%= spec.begin_code %>
          %}
          <% end %>
            __HEREDOC
          ), method: '_gen_swig_begin_code(spec)' },
        { template: (<<~__HEREDOC
          <% unless spec.no_proxies.empty? %>       

          <% spec.no_proxies.each do |name| %>
          %feature("nodirector") <%= name %>;          
          <% end %>
          <% end %>
          <% unless spec.renames.empty? %>       

          <% spec.renames.each_pair do |to, from| %>
          %rename(<%= to %>) <%= from %>;          
          <% end %>
          <% end %>
          <% if spec.swig_runtime_code && !spec.swig_runtime_code.empty? %>

          <%= spec.swig_runtime_code %>
          <% end %>
          <% if spec.runtime_code && !spec.runtime_code.empty? %>

          %runtime %{
          <%= spec.runtime_code %>
          %}
          <% end %>
            __HEREDOC
          ), method: '_gen_swig_runtime_code(spec)' },
        { template: (<<~__HEREDOC
          <% if spec.swig_header_code && !spec.swig_header_code.empty? %>

          <%= spec.swig_header_code %>
          <% end %>
          <% if spec.header_code && !spec.header_code.empty? %>

          %header {
          <%= spec.header_code %>
          %}
          <% end %>
            __HEREDOC
          ), method: '_gen_swig_header_code(spec)' },
        { template: (<<~__HEREDOC
          <% if spec.swig_wrapper_code && !spec.swig_wrapper_code.empty? %>

          <%= spec.swig_wrapper_code %>
          <% end %>
          <% if spec.wrapper_code && !spec.wrapper_code.empty? %>

          <%= spec.wrapper_code %>
          <% end %>

          <% spec.swig_imports.each do |inc| %>
          %import "<%= inc %>"
          <% end %>

          <% spec.swig_includes.each do |inc| %>
          %include "<%= inc %>"
          <% end %>
            __HEREDOC
          ), method: '_gen_swig_wrapper_code(spec)' },
        { template: (<<~__HEREDOC
          <% if spec.swig_init_code && !spec.swig_init_code.empty? %>

          <%= spec.swig_init_code %>
          <% end %>
          <% if spec.init_code && !spec.init_code.empty? %>

          %init %{
          <%= spec.init_code %>
          %}
          <% end %>
            __HEREDOC
          ), method: '_gen_swig_init_code(spec)' },
        { template: (<<~__HEREDOC
          <% if spec.swig_interface_code && !spec.swig_interface_code.empty? %>

          <%= spec.swig_interface_code %>
          <% end %>
          <% if spec.interface_code && !spec.interface_code.empty? %>

          <%= spec.interface_code %>
          <% end %>
            __HEREDOC
          ), method: '_gen_swig_interface_code(spec)' },
      ]

      LIST.each do |tpl|
        if StandardGenerator.has_erb_kw?
          ERB.new(tpl[:template], trim_mode: '<>').def_method(self, tpl[:method], __FILE__)
        else
          ERB.new(tpl[:template], nil,  '<>').def_method(self, tpl[:method], __FILE__)
        end
      end

    end # module Template

    include Template

    def parse_erb_template(tpl, spec)
      if self.class.has_erb_kw?
        ERB.new(tpl[:template], trim_mode: '<>').result(binding)
      else
        ERB.new(tpl[:template], nil,  '<>').result(binding)
      end
    end
    protected :parse_erb_template

    def gen_swig_header(fout, spec)
      fout << <<~__HEREDOC
          /**
           * This file is automatically generated by the WXRuby3 interface generator.
           * Do not alter this file.
           */

          %include "../common.i"

          %module(directors="1") <%= spec.module_name %>
        __HEREDOC
    end

    def gen_swig_gc_types(fout, spec)
      spec.def_items.each do |item|
        if Extractor::ClassDef === item
          unless spec.is_folded_base?(item.name)
            fout.puts "#{spec.gc_type(item)}(#{item.name});"
          end
        end
      end
    end

    def gen_swig_begin_code(fout, spec)
      fout << _gen_swig_begin_code(spec)
    end

    def gen_swig_runtime_code(fout, spec)
      fout << _gen_swig_runtime_code(spec)
    end

    def gen_swig_header_code(fout, spec)
      fout << _gen_swig_header_code(spec)
    end

    def gen_swig_wrapper_code(fout, spec)
      fout << _gen_swig_wrapper_code(spec)
    end

    def gen_swig_init_code(fout, spec)
      fout << _gen_swig_init_code(spec)
    end

    def gen_swig_extensions(fout, spec)
      spec.def_items.each do |item|
        if Extractor::ClassDef === item && !item.ignored && !spec.is_folded_base?(item.name)
          extension = spec.extend_code(item.name)
          unless extension.empty?
            fout.puts "\n%extend #{item.name} {"
            fout.puts extension
            fout.puts '};'
          end
        end
      end
    end

    def gen_swig_interface_code(fout, spec)
      spec.def_items.each do |item|
        if Extractor::ClassDef === item && !item.ignored && !spec.is_folded_base?(item.name)
          fout.puts ''
          spec.base_list(item).reverse.each do |base|
            fout.puts %Q{%import "#{WXRuby3::Config.instance.interface_dir}/#{base}.h"}
          end
        end
      end

      fout << _gen_swig_interface_code(spec)
    end

    def gen_swig_interface_file(spec)
      File.open(spec.interface_file, File::CREAT|File::TRUNC|File::RDWR) do |fout|
        gen_swig_interface_specs(fout, spec)
      end
    end

    def gen_swig_interface_specs(fout, spec)
      gen_swig_header(fout, spec)

      gen_swig_gc_types(fout, spec)

      gen_swig_begin_code(fout, spec)

      gen_swig_runtime_code(fout, spec)

      gen_swig_header_code(fout, spec)

      gen_swig_wrapper_code(fout, spec)

      gen_swig_init_code(fout, spec)

      gen_swig_extensions(fout, spec)

      gen_swig_interface_code(fout, spec)
    end

    def gen_interface_include(spec)
      File.open(spec.interface_include_file, File::CREAT|File::TRUNC|File::RDWR) do |fout|
        gen_interface_include_code(fout, spec)
      end
    end

    def gen_interface_include_header(fout, spec)
      fout << <<~HEREDOC
        /**
         * This file is automatically generated by the WXRuby3 interface generator.
         * Do not alter this file.
         */
                 
        #ifdef __#{spec.module_name.upcase}_H_INCLUDED__
        #define __#{spec.module_name.upcase}_H_INCLUDED__
      HEREDOC
    end

    def gen_interface_include_footer(fout, spec)
      fout << "\n#endif /* __#{spec.module_name.upcase}_H_INCLUDED__ */"
    end

    def gen_interface_include_code(fout, spec)
      gen_interface_include_header(fout, spec)

      gen_interface_classes(fout, spec)

      gen_typedefs(fout, spec)

      gen_variables(fout, spec)

      gen_enums(fout, spec)

      gen_defines(fout, spec)

      gen_functions(fout, spec)

      gen_interface_include_footer(fout, spec)
    end

    def run(spec)
      gen_swig_interface_file(spec)

      gen_interface_include(spec)
    end

  end # class ClassGenerator

end # module WXRuby3
